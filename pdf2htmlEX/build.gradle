import groovy.xml.MarkupBuilder

/*
 * build.gradle
 *
 * pdf2htmlEX-Android (https://github.com/ViliusSutkus89/pdf2htmlEX-Android)
 * Android port of pdf2htmlEX - Convert PDF to HTML without losing text or format.
 *
 * Copyright (c) 2019 Vilius Sutkus <ViliusSutkus89@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

version = '0.17.0'
group = 'com.viliussutkus89'

apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'
android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29

        versionCode 3
        versionName project.version

        archivesBaseName = rootProject.name
    }
    buildTypes.release.externalNativeBuild {
      cmake.arguments '-DCMAKE_BUILD_TYPE=MinSizeRel'
    }
    externalNativeBuild.cmake {
        path "src/main/cpp/CMakeLists.txt"
        version "3.10.2"
    }
    sourceSets.main.assets.srcDirs = ["${project.buildDir}/assets/"]
    ndkVersion "20.0.5594570"
}

task sourceJar(type: Jar) {
    into ("", { from android.sourceSets.main.java.srcDirs} )
    into ("", { from file("../LICENSE")})
    into ("cpp", { from fileTree(dir: "src/main/cpp/") } )
    into ("dependency-builder", { from fileTree(
        dir: "../dependency-builder/src/main/cpp/",
        exclude: "tarballs"
    )})
    archiveBaseName = rootProject.name
    archiveClassifier = 'sources'
}

configurations {
    // * What went wrong:
    // Could not determine the dependencies of task ':lib:javadoc'.
    // > Resolving configuration 'implementation' directly is not allowed
    extendedImplementation.extendsFrom implementation
}

task javadoc(type: Javadoc) {
    options.encoding = 'UTF-8'
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.extendedImplementation
    title = "${rootProject.name} ${project.version} API"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task gatherLicenses {
  doLast {
    file("$buildDir/licenses.xml").withWriter { writer ->
        def xml = new MarkupBuilder(writer)

        xml.doubleQuotes = true
        xml.mkp.xmlDeclaration(version: '1.0', encoding: 'utf-8')

        xml.licenses() {
            license() {
                name("pdf2htmlEX-Android")
                url("pdf2htmlEX-Android/LICENSE\n\n" + new File("$projectDir/../LICENSE").getText('UTF-8') + "\n\n")
                distribution('repo')
            }

            def addLicense = { depName, licenseFiles ->
                license {
                    name(depName)
                    def urlVal = new StringBuilder()
                    licenseFiles.each() { licenseFilename ->
                        urlVal.append("$depName/$licenseFilename\n\n")

                        def licenseFile = new File("$projectDir/../dependency-builder/.cxx/cmake/release/x86/$depName-prefix/src/$depName/$licenseFilename")
                        def licenseText = licenseFile.getText('UTF-8')
                        // LGPL2.1 and GPLv2 licenses include form feed (page break) characters.
                        // XML does not take kindly to form feed characters.
                        if ((depName == "cairo" && licenseFilename == "COPYING-LGPL-2.1") ||
                            (depName == "freetype" && licenseFilename == "docs/GPLv2.TXT") ||
                            (depName == "glib-2.0" && licenseFilename == "COPYING") ||
                            (depName == "fribidi" && licenseFilename == "COPYING") ||
                            (depName == "iconv" && licenseFilename == "COPYING.LIB") ||
                            (depName == "intl" && licenseFilename == "COPYING") ||
                            (depName == "pango" && licenseFilename == "COPYING")) {
                            urlVal.append(licenseText.replace("\u000C", ""))
                        } else {
                            urlVal.append(licenseText)
                        }
                        urlVal.append("\n\n")
                    }
                    url(urlVal)
                }
            }
            addLicense("pdf2htmlEX", ["LICENSE", "LICENSE_GPLv3"])
            addLicense("cairo", ["COPYING", "COPYING-LGPL-2.1", "COPYING-MPL-1.1"])
            addLicense("fontconfig", ["COPYING"])
            addLicense("freetype", ["docs/LICENSE.TXT", "docs/GPLv2.TXT", "docs/FTL.TXT"])
            addLicense("fribidi", ["COPYING"])
            addLicense("glib-2.0", ["COPYING"])
            addLicense("harfbuzz", ["COPYING"])
            addLicense("iconv", ["README", "COPYING", "COPYING.LIB"])
            addLicense("intl", ["COPYING"])
            addLicense("lcms2", ["COPYING"])
            addLicense("libffi", ["LICENSE"])
            addLicense("libfontforge", ["LICENSE", "COPYING.gplv3"])
            addLicense("libjpeg", ["LICENSE.md", "README.ijg"])
            addLicense("libopenjp2", ["LICENSE"])
            addLicense("libpng", ["LICENSE"])
            addLicense("libtiff-4", ["COPYRIGHT"])
            addLicense("libtool", ["COPYING"])
            addLicense("libuninameslist", ["LICENSE"])
            addLicense("libxml-2.0", ["Copyright"])
            addLicense("pango", ["COPYING"])
            addLicense("pixman-1", ["COPYING"])
            addLicense("poppler-data", ["COPYING", "COPYING.adobe", "COPYING.gpl2"])
            addLicense("poppler", ["COPYING", "COPYING3"])
        }
    }
  }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

    publications = ['projectRelease']

    pkg {
        repo = 'maven-repo'
        name = rootProject.name
        desc = 'Android port of pdf2htmlEX - Convert PDF to HTML without losing text or format'

        websiteUrl = 'https://github.com/ViliusSutkus89/pdf2htmlEX-Android'
        vcsUrl = 'https://github.com/ViliusSutkus89/pdf2htmlEX-Android.git'
        issueTrackerUrl = 'https://github.com/ViliusSutkus89/pdf2htmlEX-Android/issues'

        licenses = ['GPL-3.0-only']
        labels = ['pdf', 'html', 'pdf-document-processor', 'android', 'library', 'pdf-conversion-library']

        publish = true

        version {
            name = this.version
            released = new Date()
            vcsTag = "v${this.version}"
        }
    }
}

publishing{
    publications {
        projectRelease(MavenPublication) {
            artifactId rootProject.name
            artifact "$buildDir/outputs/aar/${rootProject.name}-release.aar"
            artifact sourceJar
            artifact javadocJar
            pom {
                packaging = 'aar'
                url = 'https://github.com/ViliusSutkus89/pdf2htmlEX-Android'
                inceptionYear = '2019'
                developers {
                    developer {
                        id = "ViliusSutkus89"
                        name = "Vilius Sutkus"
                        email = "ViliusSutkus89@gmail.com"
                    }
                }
                scm {
                    url = 'https://github.com/ViliusSutkus89/pdf2htmlEX-Android'
                    connection = 'https://github.com/ViliusSutkus89/pdf2htmlEX-Android.git'
                }
            }
            pom.withXml {
                def node = asNode()

                def licensesNode = node.appendNode("licenses")
                new XmlSlurper().parse("$buildDir/licenses.xml").license.each {
                    def license = licensesNode.appendNode('license')
                    license.appendNode('name', it.name)
                    license.appendNode('url', it.url)
                    if (it.distribution) {
                        license.appendNode('distribution', it.distribution)
                    }
                }

                def dependenciesNode = node.appendNode('dependencies')
                // Iterate over the implementation dependencies (we don't want the test ones),
                // adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included in the pom.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

// pdf2htmlEX and Poppler have some data that is needed on runtime
task collectAssetsFromShareFolder {
    doLast {
        copy {
            new File("$projectDir/../dependency-builder/.cxx/cmake/").eachDir() { buildType ->
                buildType.eachDir() {
                    from("$it/installed/share")
                    include("pdf2htmlEX/**", "poppler/**")
                    into("${project.buildDir}/assets")
                }
            }
            duplicatesStrategy('exclude')
        }
    }
}

// Because "generateDebugAssets.dependsOn collectAssetsFromShareFolder" would be too simple
tasks.whenTaskAdded {
    if (it.name == 'generateDebugAssets' || it.name == 'generateReleaseAssets') {
        it.dependsOn collectAssetsFromShareFolder
    }
}

dependencies {
    implementation 'com.viliussutkus89:tmpfile-android:1.0.1'
    implementation 'androidx.annotation:annotation:1.1.0'
}

// Extract shared .so libraries to build directory
// So that they could be linked against in CMake
task extractLibtmpfileSoForLinkingInCMake(type: Copy) {
    // Cannot resolve "implementation" configuration directly
    // Extend it, so it could be used to get resolved artifacts

    configurations.extendedImplementation.getResolvedConfiguration().getResolvedArtifacts().each {
        if (it.getName() == "tmpfile-android") {
            from zipTree(it.getFile())
            into "${project.buildDir}/tmpfile/"
            include "jni/**/libtmpfile.so"
        }
    }
}

preBuild.dependsOn extractLibtmpfileSoForLinkingInCMake
