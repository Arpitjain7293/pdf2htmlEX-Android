apply plugin: 'com.android.library'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
    }
    buildTypes.release.externalNativeBuild {
      cmake.arguments '-DCMAKE_BUILD_TYPE=MinSizeRel'
    }
    externalNativeBuild.cmake {
        path "src/main/cpp/CMakeLists.txt"
        version "3.10.2"
    }
    sourceSets.main.assets.srcDirs = ["${project.buildDir}/assets/"]
    ndkVersion "20.0.5594570"
}

task sourceJar(type: Jar) {
    into ("", { from android.sourceSets.main.java.srcDirs} )
    into ("cpp", { from fileTree(dir: "src/main/cpp/") } )
    into ("dependency-builder", { from fileTree(
        dir: "../dependency-builder/lib/src/main/cpp/",
        exclude: "tarballs"
    )})
    archiveBaseName = rootProject.name
    archiveClassifier = 'sources'
}
// pdf2htmlEX and Poppler have some data that is needed on runtime
task collectAssetsFromShareFolder {
    doLast {
        copy {
            new File("$projectDir/../dependency-builder/lib/.cxx/cmake/").eachDir() { buildType ->
                buildType.eachDir() {
                    from("$it/share")
                    include("pdf2htmlEX/**", "poppler/**")
                    into("${project.buildDir}/assets")
                }
            }
            duplicatesStrategy('exclude')
        }
    }
}

// Because "generateDebugAssets.dependsOn collectAssetsFromShareFolder" would be too simple
tasks.whenTaskAdded {
    if (it.name == 'generateDebugAssets' || it.name == 'generateReleaseAssets') {
        it.dependsOn collectAssetsFromShareFolder
    }
}

dependencies {
    implementation 'com.viliussutkus89:tmpfile-android:1.0.1'
    implementation 'androidx.annotation:annotation:1.1.0'
}

// Extract shared .so libraries to build directory
// So that they could be linked against in CMake
task extractLibtmpfileSoForLinkingInCMake(type: Copy) {
    configurations {
        extendedImplementation.extendsFrom implementation
    }
    // Cannot resolve "implementation" configuration directly
    // Extend it, so it could be used to get resolved artifacts

    configurations.extendedImplementation.getResolvedConfiguration().getResolvedArtifacts().each {
        if (it.getName() == "tmpfile-android") {
            from zipTree(it.getFile())
            into "${project.buildDir}/tmpfile/"
            include "jni/**/libtmpfile.so"
        }
    }
}

preBuild.dependsOn extractLibtmpfileSoForLinkingInCMake
