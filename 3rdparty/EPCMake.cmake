include(ExternalProject)

function(ExternalProjectCMake EXTERNAL_PROJECT_NAME)
  # Check both pkg-config and find-cmake
  find_package(${EXTERNAL_PROJECT_NAME} QUIET)
  pkg_check_modules(LIBNAME QUIET ${EXTERNAL_PROJECT_NAME})

  if (NOT ${EXTERNAL_PROJECT_NAME}_FOUND AND NOT LIBNAME_FOUND)
    message(STATUS "External project ${EXTERNAL_PROJECT_NAME} not found, will have to be built.")

    set(options)
    set(oneValueArgs URL URL_HASH)
    set(multipleValueArgs DEPENDS CONFIGURE_ARGUMENTS EXTRA_ARGUMENTS)
    cmake_parse_arguments(EPCM "${options}" "${oneValueArgs}" "${multipleValueArgs}" ${ARGN})

    FilterDependsList(EPCM_DEPENDS)

    #@TODO: check how to set CFLAGS and other ENV vars
    #@TODO: unhardcode
    # compare against built/cmake/debug/x86_64/cmake_build_command.txt
    SET(EPCM_CONFIGURE_COMMAND ${CMAKE_COMMAND}
      -H${CMAKE_CURRENT_BINARY_DIR}/${EXTERNAL_PROJECT_NAME}-prefix/src/${EXTERNAL_PROJECT_NAME}
      -B${CMAKE_CURRENT_BINARY_DIR}/${EXTERNAL_PROJECT_NAME}-prefix/src/${EXTERNAL_PROJECT_NAME}-build

      -DANDROID_ABI=${ANDROID_ABI}
      -DANDROID_PLATFORM=${ANDROID_PLATFORM}
      -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
      -DCMAKE_SYSTEM_VERSION=${CMAKE_SYSTEM_VERSION}
      -DCMAKE_EXPORT_COMPILE_COMMANDS=${CMAKE_EXPORT_COMPILE_COMMANDS}

      -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
      -DCMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}
      -DCMAKE_INSTALL_PREFIX=${THIRDPARTY_PREFIX}
      -DCMAKE_FIND_ROOT_PATH=${CMAKE_FIND_ROOT_PATH}
      
      -DPKG_CONFIG_LIBDIR=${THIRDPARTY_PKG_CONFIG_LIBDIR}
      -DPKG_CONFIG_EXECUTABLE=${THIRDPARTY_PKG_CONFIG_EXECUTABLE}

      -DCMAKE_VERBOSE_MAKEFILE=1

      #-DANDROID_NDK=${ANDROID_NDK}
      #-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}
      #-DCMAKE_SYSTEM_NAME=${CMAKE_SYSTEM_NAME}
      #-DCMAKE_ANDROID_ARCH_ABI=${CMAKE_ANDROID_ARCH_ABI}
      #-DCMAKE_ANDROID_NDK=${CMAKE_ANDROID_NDK}
      
      #@TODO: pass CXX flags from gradle.properties ?
    )

    if (NOT BUILD_SHARED_LIBS)
      LIST(APPEND EPCM_CONFIGURE_COMMAND -DBUILD_SHARED_LIBS=OFF)
    endif (NOT BUILD_SHARED_LIBS)

    LIST(APPEND EPCM_CONFIGURE_COMMAND ${EPCM_CONFIGURE_ARGUMENTS})

    MESSAGE(STATUS "ExternalProjectCMake_ADD ${EXTERNAL_PROJECT_NAME}")
    ExternalProject_Add(${EXTERNAL_PROJECT_NAME}
      ${EPCM_DEPENDS}
      URL ${EPCM_URL}
      URL_HASH ${EPCM_URL_HASH}

      CONFIGURE_COMMAND ${EPCM_CONFIGURE_COMMAND}
      BUILD_COMMAND ${CMAKE_COMMAND} -E env ${TOOLCHAIN_ENV} ${CMAKE_COMMAND} --build .

      ${EPCM_EXTRA_ARGUMENTS}

      LOG_DOWNLOAD 1
      LOG_CONFIGURE 1
      LOG_BUILD 1
      LOG_INSTALL 1
    )
  endif(NOT ${EXTERNAL_PROJECT_NAME}_FOUND AND NOT LIBNAME_FOUND)
endfunction(ExternalProjectCMake)
