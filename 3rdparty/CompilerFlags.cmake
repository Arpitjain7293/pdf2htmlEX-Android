# Get Compiler flags from our current CMake environment,
# Will be passed to Autotools and Meson

SET(CFLAGS ${CMAKE_C_FLAGS})
SET(CXXFLAGS ${CMAKE_CXX_FLAGS})
SET(LDFLAGS ${ANDROID_LINKER_FLAGS})

if (CMAKE_BUILD_TYPE STREQUAL Debug)
  STRING(APPEND CFLAGS ${CMAKE_C_FLAGS_DEBUG})
  STRING(APPEND CXXFLAGS ${CMAKE_CXX_FLAGS_DEBUG})
elseif(CMAKE_BUILD_TYPE STREQUAL Release)
  STRING(APPEND CFLAGS ${CMAKE_C_FLAGS_RELEASE})
  STRING(APPEND CXXFLAGS ${CMAKE_CXX_FLAGS_RELEASE})
elseif(CMAKE_BUILD_TYPE STREQUAL RelWithDebInfo)
  STRING(APPEND CFLAGS ${CMAKE_C_FLAGS_RELWITHDEBINFO})
  STRING(APPEND CXXFLAGS ${CMAKE_CXX_FLAGS_RELWITHDEBINFO})
elseif(CMAKE_BUILD_TYPE STREQUAL MinSizeRel)
  STRING(APPEND CFLAGS ${CMAKE_C_FLAGS_MINSIZEREL})
  STRING(APPEND CXXFLAGS ${CMAKE_CXX_FLAGS_MINSIZEREL})
endif()

STRING(APPEND CFLAGS " -I${THIRDPARTY_PREFIX}/include")
STRING(APPEND CXXFLAGS " -I${THIRDPARTY_PREFIX}/include")
STRING(APPEND LDFLAGS " -L${THIRDPARTY_PREFIX}/lib")

if(CMAKE_BUILD_TYPE STREQUAL MinSizeRel)
  STRING(REPLACE "-g " " " CFLAGS ${CFLAGS})
  STRING(REPLACE "-g " " " CXXFLAGS ${CXXFLAGS})
endif()

if (ANDROID)
  if(ANDROID_ABI STREQUAL armeabi-v7a)
    SET(AS ${ANDROID_TOOLCHAIN_ROOT}/bin/armv7a-linux-androideabi-as)
    SET(CC ${ANDROID_TOOLCHAIN_ROOT}/bin/armv7a-linux-androideabi${ANDROID_NATIVE_API_LEVEL}-clang)
    SET(CXX ${ANDROID_TOOLCHAIN_ROOT}/bin/armv7a-linux-androideabi${ANDROID_NATIVE_API_LEVEL}-clang++)
    SET(HOST_TRIPLE armv7a-linux-androideabi)
  elseif(ANDROID_ABI STREQUAL arm64-v8a)
    SET(AS ${ANDROID_TOOLCHAIN_ROOT}/bin/aarch64-linux-android-as)
    SET(CC ${ANDROID_TOOLCHAIN_ROOT}/bin/aarch64-linux-android${ANDROID_NATIVE_API_LEVEL}-clang)
    SET(CXX ${ANDROID_TOOLCHAIN_ROOT}/bin/aarch64-linux-android${ANDROID_NATIVE_API_LEVEL}-clang++)
    SET(HOST_TRIPLE aarch64-linux-android)
  elseif(ANDROID_ABI STREQUAL x86)
    SET(AS ${ANDROID_TOOLCHAIN_ROOT}/bin/x86-linux-android-as)
    SET(CC ${ANDROID_TOOLCHAIN_ROOT}/bin/i686-linux-android${ANDROID_NATIVE_API_LEVEL}-clang)
    SET(CXX ${ANDROID_TOOLCHAIN_ROOT}/bin/i686-linux-android${ANDROID_NATIVE_API_LEVEL}-clang++)
    SET(HOST_TRIPLE i686-linux-android)
  elseif(ANDROID_ABI STREQUAL x86_64)
    SET(AS ${ANDROID_TOOLCHAIN_ROOT}/bin/x86_64-linux-android-as)
    SET(CC ${ANDROID_TOOLCHAIN_ROOT}/bin/x86_64-linux-android${ANDROID_NATIVE_API_LEVEL}-clang)
    SET(CXX ${ANDROID_TOOLCHAIN_ROOT}/bin/x86_64-linux-android${ANDROID_NATIVE_API_LEVEL}-clang++)
    SET(HOST_TRIPLE x86_64-linux-android)
  else()
    message(FATAL_ERROR "Invalid Android ABI: ${ANDROID_ABI}.")
  endif()
else()
  #SET(AS @TODO: set AS binary)
  SET(CC ${CMAKE_C_COMPILER})
  SET(CXX ${CMAKE_CXX_COMPILER})
endif()
